// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum GameState {
  IN_PROGRESS
  FINISHED
}

model User {
  id                 String             @id @default(uuid())
  email              String             @unique
  password           String
  firstName          String
  lastName           String
  questionCategories QuestionCategory[]
  startedGames       Game[]
}

model QuestionCategory {
  id        String     @id @default(uuid())
  name      String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  questions Question[]
  priority  Int?

  @@unique([userId, name])
}

model Question {
  id                String             @id @default(uuid())
  category          QuestionCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId        String
  answers           Answer[]           @relation(name: "questionAnswers")
  correctAnswer     Answer?            @relation(name: "correctAnswer", fields: [correctAnswerId], references: [id], onDelete: Cascade)
  correctAnswerId   String?            @unique
  text              String
  answeredQuestions AnsweredQuestion[]
}

model Answer {
  id                 String    @id @default(uuid())
  question           Question  @relation(name: "questionAnswers", fields: [questionId], references: [id], onDelete: Cascade)
  questionId         String
  correctForQuestion Question? @relation(name: "correctAnswer")
  text               String
  priority           Int?
}

model Game {
  id                String             @id @default(uuid())
  startedById       String
  startedBy         User               @relation(fields: [startedById], references: [id])
  currentPlayerId   String?
  nextPlayerId      String?
  state             GameState
  players           Player[]
  startedAt         DateTime           @default(now())
  answeredQuestions AnsweredQuestion[]
}

model AnsweredQuestion {
  id            String    @id @default(uuid())
  gameId        String
  game          Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  answeredById  String
  answeredBy    Player    @relation(fields: [answeredById], references: [id], onDelete: Cascade)
  questionId    String?
  question      Question? @relation(fields: [questionId], references: [id], onDelete: SetNull)
  metadata      Json
  correctAnswer Boolean
  answeredAt    DateTime  @default(now())
}

model Player {
  id                String             @id @default(uuid())
  name              String
  points            Int                @default(0)
  gameId            String
  game              Game               @relation(fields: [gameId], references: [id], onDelete: Cascade)
  order             Int
  answeredQuestions AnsweredQuestion[]
}
