// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum GameState {
    IN_PROGRESS
    FINISHED
}

model User {
    id String @id @default(uuid())
    email String  @unique
    password String
    firstName String
    lastName String
    ownedGroups Group[] @relation
    ownedQuestions Question[] @relation
    memberships GroupMembership[] @relation
    startedGames Game[] @relation
}

model Group {
    id String @id @default(uuid())
    name String
    createdAt DateTime @default(now())
    owner User @relation(fields: [ownerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    ownerId String
    userMemberships GroupMembership[] @relation
    questionCategories QuestionCategory[] @relation
}

model GroupMembership {
    id String @id @default(uuid())
    user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String
    group Group @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    groupId String

    @@unique([userId, groupId])
}

model Game {
    id String @id @default(uuid())
    startedById String
    startedBy User @relation(fields: [startedById], references: [id], onUpdate: Cascade, onDelete: Cascade)
    currentPlayerId String?
    nextPlayerId String?
    state GameState
    players Player[] @relation
    startedAt DateTime @default(now())
}

model Player {
    id String @id @default(uuid())
    name String
    points Int @default(0)
    gameId String
    game Game @relation(fields: [gameId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    order Int
}

model QuestionCategory {
    id String @id @default(uuid())
    name String
    group Group @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    groupId String
    questions Question[] @relation
    order Int?

    @@unique([groupId, name])
}

model Question {
    id String @id @default(uuid())
    user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String
    category QuestionCategory @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    categoryId String
    answers Answer[] @relation
    correctAnswer String?
    text String
}

model Answer {
    id String @id @default(uuid())
    question Question @relation(fields: [questionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    questionId String
    text String
    order Int?
}
