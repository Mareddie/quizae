// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    email String  @unique
    password String
    firstName String
    lastName String
    ownedGroups Group[] @relation()
    ownedQuestions Question[] @relation()
    memberships GroupMembership[] @relation()
}

model Group {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    createdAt DateTime @default(now())
    owner User @relation(fields: [ownerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    ownerId String @db.ObjectId
    userMemberships GroupMembership[] @relation()
    questionCategories QuestionCategory[] @relation()
}

model GroupMembership {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String @db.ObjectId
    group Group @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    groupId String @db.ObjectId

    @@unique([userId, groupId])
}

model QuestionCategory {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    group Group @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    groupId String @db.ObjectId
    questions Question[] @relation()
    order Int?
}

model Question {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String @db.ObjectId
    category QuestionCategory @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    categoryId String @db.ObjectId
    answers Answer[] @relation()
    correctAnswer String? @db.ObjectId
    text String
}

model Answer {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    question Question @relation(fields: [questionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    questionId String @db.ObjectId
    text String
    order Int?
}
